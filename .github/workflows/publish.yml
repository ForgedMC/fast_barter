name: "ðŸš€ Publish"

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: 3.13.0

      - name: "Install beet, bolt, mecha"
        run: |
          python -m pip install --upgrade pip
          pip install beet bolt mecha

      - name: "Build Datapack"
        run: beet build

      - name: "Detect Datapack Name"
        id: detect
        run: |
          PACK_DIR=$(find build -mindepth 1 -maxdepth 1 -type d | head -n1)
          if [ -z "$PACK_DIR" ]; then
            echo "ERROR: Nenhum diretÃ³rio de datapack encontrado em build/"
            ls -la build || true
            exit 1
          fi
          PACK_NAME=$(basename "$PACK_DIR")
          echo "PACK_DIR=$PACK_DIR" >> $GITHUB_ENV
          echo "PACK_NAME=$PACK_NAME" >> $GITHUB_ENV
          echo "Detected datapack: $PACK_NAME at $PACK_DIR"

      - name: "Validate Datapack Output"
        run: |
          if [ ! -f "$PACK_DIR/pack.mcmeta" ]; then
            echo "ERROR: $PACK_DIR/pack.mcmeta nÃ£o encontrado."
            ls -la "$PACK_DIR" || true
            exit 1
          fi
          if [ ! -d "$PACK_DIR/data" ]; then
            echo "ERROR: $PACK_DIR/data nÃ£o encontrado."
            ls -la "$PACK_DIR" || true
            exit 1
          fi
          echo "Datapack parece vÃ¡lido:"
          ls -la "$PACK_DIR"

      - name: "Prepare Version Metadata"
        id: version
        run: |
          TAG="${GITHUB_REF_NAME}"
          BASE_VERSION=$(echo "$TAG" | cut -d'-' -f1)
          MC_START=$(echo "$TAG" | cut -d'-' -f2)
          MC_END=$(echo "$TAG" | cut -d'-' -f3)

          expand_versions() {
            start="$1"
            end="$2"

            if [ "$(echo "$start" | awk -F. '{print NF}')" -eq 2 ]; then
              start="${start}.0"
            fi

            major_start=$(echo "$start" | cut -d. -f1)
            minor_start=$(echo "$start" | cut -d. -f2)
            patch_start=$(echo "$start" | cut -d. -f3)
            
            if [ "$(echo "$end" | awk -F. '{print NF}')" -eq 2 ]; then
              end="${end}.0"
            fi

            major_end=$(echo "$end" | cut -d. -f1)
            minor_end=$(echo "$end" | cut -d. -f2)
            patch_end=$(echo "$end" | cut -d. -f3)

            if [ "$major_start" != "$major_end" ] || [ "$minor_start" != "$minor_end" ]; then
              echo "ERROR: Range de versÃµes cruza minors diferentes (${major_start}.${minor_start} -> ${major_end}.${minor_end})."
              echo "Suportado apenas ranges dentro do mesmo major.minor (ex: 1.21 -> 1.21.10)."
              exit 1
            fi

            major="$major_start"
            minor="$minor_start"

            versions=()
            for patch in $(seq "$patch_start" "$patch_end"); do
              if [ "$patch" -eq 0 ]; then
                versions+=("${major}.${minor}")
              else
                versions+=("${major}.${minor}.${patch}")
              fi
            done

            printf '['
            first=1
            for v in "${versions[@]}"; do
              if [ $first -eq 1 ]; then
                first=0
              else
                printf ','
              fi
              printf '"%s"' "$v"
            done
            printf ']'
          }

          GAME_VERSIONS_JSON=$(expand_versions "$MC_START" "$MC_END")

          MC_RANGE="${MC_START}-${MC_END}"
          FILE_SUFFIX="v.${BASE_VERSION}+${MC_RANGE}"
          FILE_SUFFIX_SAFE=$(echo "$FILE_SUFFIX" | tr '/' '-')

          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
          echo "MC_START=$MC_START" >> $GITHUB_ENV
          echo "MC_END=$MC_END" >> $GITHUB_ENV
          echo "FILE_SUFFIX=$FILE_SUFFIX_SAFE" >> $GITHUB_ENV
          echo "GAME_VERSIONS_JSON=$GAME_VERSIONS_JSON" >> $GITHUB_ENV

          echo "Base: $BASE_VERSION"
          echo "MC Versions: $GAME_VERSIONS_JSON"

      - name: "Create Mod from Datapack"
        run: |
          python - <<'EOF'
          import json, zipfile, os
          from pathlib import Path

          def sanitize_id(name):
              return ''.join(c if c.isalnum() or c == '_' else '_' for c in name.lower()).strip('_') or 'pack'

          def create_fabric_json(mod_id, version, name, description):
              return {
                  "schemaVersion": 1,
                  "id": mod_id,
                  "version": version,
                  "name": name,
                  "description": description,
                  "license": "LicenseRef-Datapack",
                  "environment": "*",
                  "depends": {"fabric-resource-loader-v0": "*"}
              }

          def create_quilt_json(mod_id, version, name, description):
              return {
                  "schema_version": 1,
                  "quilt_loader": {
                      "group": "com.modrinth",
                      "id": mod_id,
                      "version": version,
                      "metadata": {"name": name, "description": description},
                      "intermediate_mappings": "net.fabricmc:intermediary",
                      "depends": [{"id": "quilt_resource_loader", "versions": "*", "unless": "fabric-resource-loader-v0"}]
                  }
              }

          def create_forge_toml(mod_id, version, name, description):
              return f"""modLoader = 'lowcodefml'
          loaderVersion = '[40,)'
          license = 'LicenseRef-Datapack'
          showAsResourcePack = false
          mods = [{{ modId = '{mod_id}', version = '{version}', displayName = '{name}', description = "{description}", credits = 'Generated by DatapackConverter' }}]
          """

          def create_neoforge_toml(mod_id, version, name, description):
              return f"""modLoader = 'javafml'
          loaderVersion = '[1,)'
          license = 'LicenseRef-Datapack'
          showAsResourcePack = false
          mods = [{{ modId = '{mod_id}', version = '{version}', displayName = '{name}', description = "{description}", credits = 'Generated by DatapackConverter' }}]
          """

          pack_dir = os.getenv("PACK_DIR", "build/unknown")
          datapack_path = Path(pack_dir).resolve()
          mod_id = sanitize_id(os.getenv("PACK_NAME", "datapack"))
          mod_name = os.getenv("PACK_NAME", "Datapack")
          mod_version = os.getenv("BASE_VERSION", "1.0.0")

          file_suffix = os.getenv("FILE_SUFFIX", "v.1.0.0")
          output_path = Path(f"{mod_name} {file_suffix}.jar")

          print(f"[DEBUG] datapack_path = {datapack_path}")
          print(f"[DEBUG] exists pack.mcmeta? {(datapack_path / 'pack.mcmeta').exists()}")
          print(f"[DEBUG] data dir exists? {(datapack_path / 'data').exists()}")

          with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as jar:
              data_root = datapack_path / "data"
              if data_root.exists():
                  for file in data_root.rglob("*"):
                      if file.is_file():
                          jar.write(file, f"data/{file.relative_to(data_root)}")
              mcmeta_file = datapack_path / "pack.mcmeta"
              if mcmeta_file.exists():
                  jar.write(mcmeta_file, "pack.mcmeta")
              jar.writestr("fabric.mod.json", json.dumps(create_fabric_json(mod_id, mod_version, mod_name, mod_name), indent=2))
              jar.writestr("quilt.mod.json", json.dumps(create_quilt_json(mod_id, mod_version, mod_name, mod_name), indent=2))
              jar.writestr("META-INF/mods.toml", create_forge_toml(mod_id, mod_version, mod_name, mod_name))
              jar.writestr("META-INF/neoforge.mods.toml", create_neoforge_toml(mod_id, mod_version, mod_name, mod_name))
          EOF

      - name: "Zip Datapack"
        run: |
          cd "$PACK_DIR"
          zip -r "../../${PACK_NAME} ${FILE_SUFFIX}.zip" .

      - name: "Prepare Metadata"
        id: modrinth
        run: |
          DESCRIPTION="${{ github.event.release.body }}"
          DESCRIPTION_ESCAPED=$(echo "$DESCRIPTION" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')
          echo "DESCRIPTION_ESCAPED=$DESCRIPTION_ESCAPED" >> $GITHUB_ENV

      - name: "Publish Mod"
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          MODRINTH_PROJECT: ${{ secrets.MODRINTH_PROJECT }}
          PACK_NAME: ${{ env.PACK_NAME }}
          BASE_VERSION: ${{ env.BASE_VERSION }}
          DESCRIPTION_ESCAPED: ${{ env.DESCRIPTION_ESCAPED }}
          GAME_VERSIONS_JSON: ${{ env.GAME_VERSIONS_JSON }}
          FILE_SUFFIX: ${{ env.FILE_SUFFIX }}
        run: |
          FILE_NAME="${PACK_NAME} ${FILE_SUFFIX}.jar"
          curl --fail -X POST "https://api.modrinth.com/v2/version" \
            -H "Authorization: $MODRINTH_TOKEN" \
            -F "data={
              \"name\":\"${BASE_VERSION}\",
              \"version_number\":\"${BASE_VERSION}\",
              \"project_id\":\"$MODRINTH_PROJECT\",
              \"changelog\":${DESCRIPTION_ESCAPED},
              \"game_versions\":${GAME_VERSIONS_JSON},
              \"version_type\":\"release\",
              \"loaders\":[\"fabric\",\"quilt\",\"forge\",\"neoforge\"],
              \"status\":\"listed\",
              \"dependencies\":[],
              \"featured\":true,
              \"files\":[{\"name\":\"${FILE_NAME}\",\"primary_file\":true}],
              \"file_parts\":[\"file\"]
            }" \
            -F "file=@${FILE_NAME}"

      - name: "Publish Datapack"
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          MODRINTH_PROJECT: ${{ secrets.MODRINTH_PROJECT }}
          PACK_NAME: ${{ env.PACK_NAME }}
          BASE_VERSION: ${{ env.BASE_VERSION }}
          DESCRIPTION_ESCAPED: ${{ env.DESCRIPTION_ESCAPED }}
          GAME_VERSIONS_JSON: ${{ env.GAME_VERSIONS_JSON }}
          FILE_SUFFIX: ${{ env.FILE_SUFFIX }}
        run: |
          FILE_NAME="${PACK_NAME} ${FILE_SUFFIX}.zip"
          curl --fail -X POST "https://api.modrinth.com/v2/version" \
            -H "Authorization: $MODRINTH_TOKEN" \
            -F "data={
              \"name\":\"${BASE_VERSION}\",
              \"version_number\":\"${BASE_VERSION}\",
              \"project_id\":\"$MODRINTH_PROJECT\",
              \"changelog\":${DESCRIPTION_ESCAPED},
              \"game_versions\":${GAME_VERSIONS_JSON},
              \"version_type\":\"release\",
              \"loaders\":[\"datapack\"],
              \"status\":\"listed\",
              \"dependencies\":[],
              \"featured\":true,
              \"files\":[{\"name\":\"${FILE_NAME}\",\"primary_file\":true}],
              \"file_parts\":[\"file\"]
            }" \
            -F "file=@${FILE_NAME}"