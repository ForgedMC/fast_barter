name: "ðŸš€ Publish"

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3

      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: 3.13.0

      - name: "Install beet, bolt, mecha"
        run: |
          python -m pip install --upgrade pip
          pip install beet bolt mecha

      - name: "Build Datapack"
        run: beet build

      - name: "Detect Datapack Name"
        id: detect
        run: |
          cd build
          PACK_DIR=$(find . -mindepth 1 -maxdepth 1 -type d | head -n1)
          PACK_NAME=$(basename "$PACK_DIR")
          echo "PACK_DIR=$PACK_DIR" >> $GITHUB_ENV
          echo "PACK_NAME=$PACK_NAME" >> $GITHUB_ENV
          echo "Detected datapack: $PACK_NAME"

      - name: "Prepare Version Metadata"
        id: version
        run: |
          # exemplo de tag: 1.0.0-1.21-1.21.10
          TAG="${GITHUB_REF_NAME}"
          BASE_VERSION=$(echo "$TAG" | cut -d'-' -f1)
          MC_START=$(echo "$TAG" | cut -d'-' -f2)
          MC_END=$(echo "$TAG" | cut -d'-' -f3)
          MC_RANGE="${MC_START}-${MC_END}"

          FILE_SUFFIX="v.${BASE_VERSION}+${MC_RANGE}"
          FILE_SUFFIX_SAFE=$(echo "$FILE_SUFFIX" | tr '/' '-')

          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
          echo "MC_START=$MC_START" >> $GITHUB_ENV
          echo "MC_END=$MC_END" >> $GITHUB_ENV
          echo "FILE_SUFFIX=$FILE_SUFFIX_SAFE" >> $GITHUB_ENV

          echo "Base: $BASE_VERSION"
          echo "Range: $MC_RANGE"

      - name: "Create Mod from Datapack"
        run: |
          python - <<'EOF'
          import json, zipfile, os
          from pathlib import Path

          def sanitize_id(name):
              return ''.join(c if c.isalnum() or c == '_' else '_' for c in name.lower()).strip('_') or 'pack'

          def create_fabric_json(mod_id, version, name, description):
              return {"schemaVersion":1,"id":mod_id,"version":version,"name":name,"description":description,"license":"LicenseRef-Datapack","environment":"*","depends":{"fabric-resource-loader-v0":"*"}}

          def create_quilt_json(mod_id, version, name, description):
              return {"schema_version":1,"quilt_loader":{"group":"com.modrinth","id":mod_id,"version":version,"metadata":{"name":name,"description":description},"intermediate_mappings":"net.fabricmc:intermediary","depends":[{"id":"quilt_resource_loader","versions":"*","unless":"fabric-resource-loader-v0"}]}}

          def create_forge_toml(mod_id, version, name, description):
              return f"""modLoader = 'lowcodefml'
          loaderVersion = '[40,)'
          license = 'LicenseRef-Datapack'
          showAsResourcePack = false
          mods = [{{ modId = '{mod_id}', version = '{version}', displayName = '{name}', description = "{description}", credits = 'Generated by DatapackConverter' }}]
          """

          def create_neoforge_toml(mod_id, version, name, description):
              return f"""modLoader = 'javafml'
          loaderVersion = '[1,)'
          license = 'LicenseRef-Datapack'
          showAsResourcePack = false
          mods = [{{ modId = '{mod_id}', version = '{version}', displayName = '{name}', description = "{description}", credits = 'Generated by DatapackConverter' }}]
          """

          datapack_path = Path(os.getenv("PACK_DIR", "build/unknown")).resolve()
          mod_id = sanitize_id(os.getenv("PACK_NAME", "datapack"))
          mod_name = os.getenv("PACK_NAME", "Datapack")
          mod_version = os.getenv("BASE_VERSION", "1.0.0")

          file_suffix = os.getenv("FILE_SUFFIX", "v.1.0.0")
          output_path = Path(f"{mod_name} {file_suffix}.jar")

          with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as jar:
              for file in (datapack_path / "data").rglob("*"):
                  if file.is_file():
                      jar.write(file, f"data/{file.relative_to(datapack_path/'data')}")
              mcmeta_file = datapack_path / "pack.mcmeta"
              if mcmeta_file.exists():
                  jar.write(mcmeta_file, "pack.mcmeta")
              jar.writestr("fabric.mod.json", json.dumps(create_fabric_json(mod_id, mod_version, mod_name, mod_name), indent=2))
              jar.writestr("quilt.mod.json", json.dumps(create_quilt_json(mod_id, mod_version, mod_name, mod_name), indent=2))
              jar.writestr("META-INF/mods.toml", create_forge_toml(mod_id, mod_version, mod_name, mod_name))
              jar.writestr("META-INF/neoforge.mods.toml", create_neoforge_toml(mod_id, mod_version, mod_name, mod_name))
          EOF

      - name: "Zip Datapack"
        run: |
          cd build
          cd "$PACK_DIR"
          zip -r "../../${PACK_NAME} ${FILE_SUFFIX}.zip" .

      - name: "Prepare Metadata"
        id: modrinth
        run: |
          DESCRIPTION="${{ github.event.release.body }}"
          DESCRIPTION_ESCAPED=$(echo "$DESCRIPTION" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')
          GAME_VERSIONS_JSON="[\"${MC_START}\",\"${MC_END}\"]"
          echo "DESCRIPTION_ESCAPED=$DESCRIPTION_ESCAPED" >> $GITHUB_ENV
          echo "GAME_VERSIONS_JSON=$GAME_VERSIONS_JSON" >> $GITHUB_ENV

      - name: "Publish Mod"
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          MODRINTH_PROJECT: ${{ secrets.MODRINTH_PROJECT }}
          PACK_NAME: ${{ env.PACK_NAME }}
          BASE_VERSION: ${{ env.BASE_VERSION }}
          DESCRIPTION_ESCAPED: ${{ env.DESCRIPTION_ESCAPED }}
          GAME_VERSIONS_JSON: ${{ env.GAME_VERSIONS_JSON }}
          FILE_SUFFIX: ${{ env.FILE_SUFFIX }}
        run: |
          FILE_NAME="${PACK_NAME} ${FILE_SUFFIX}.jar"
          curl --fail -X POST "https://api.modrinth.com/v2/version" \
            -H "Authorization: $MODRINTH_TOKEN" \
            -F "data={
              \"name\":\"${BASE_VERSION}\",
              \"version_number\":\"${BASE_VERSION}\",
              \"project_id\":\"$MODRINTH_PROJECT\",
              \"changelog\":${DESCRIPTION_ESCAPED},
              \"game_versions\":${GAME_VERSIONS_JSON},
              \"version_type\":\"release\",
              \"loaders\":[\"fabric\",\"quilt\",\"forge\",\"neoforge\"],
              \"status\":\"listed\",
              \"dependencies\":[],
              \"featured\":true,
              \"files\":[{\"name\":\"${FILE_NAME}\",\"primary_file\":true}],
              \"file_parts\":[\"file\"]
            }" \
            -F "file=@${FILE_NAME}"

      - name: "Publish Datapack"
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          MODRINTH_PROJECT: ${{ secrets.MODRINTH_PROJECT }}
          PACK_NAME: ${{ env.PACK_NAME }}
          BASE_VERSION: ${{ env.BASE_VERSION }}
          DESCRIPTION_ESCAPED: ${{ env.DESCRIPTION_ESCAPED }}
          GAME_VERSIONS_JSON: ${{ env.GAME_VERSIONS_JSON }}
          FILE_SUFFIX: ${{ env.FILE_SUFFIX }}
        run: |
          FILE_NAME="${PACK_NAME} ${FILE_SUFFIX}.zip"
          curl --fail -X POST "https://api.modrinth.com/v2/version" \
            -H "Authorization: $MODRINTH_TOKEN" \
            -F "data={
              \"name\":\"${BASE_VERSION}\",
              \"version_number\":\"${BASE_VERSION}\",
              \"project_id\":\"$MODRINTH_PROJECT\",
              \"changelog\":${DESCRIPTION_ESCAPED},
              \"game_versions\":${GAME_VERSIONS_JSON},
              \"version_type\":\"release\",
              \"loaders\":[\"datapack\"],
              \"status\":\"listed\",
              \"dependencies\":[],
              \"featured\":true,
              \"files\":[{\"name\":\"${FILE_NAME}\",\"primary_file\":true}],
              \"file_parts\":[\"file\"]
            }" \
            -F "file=@${FILE_NAME}"
